#!/usr/bin/env bash
# Build cfMesh (integration-cfmesh v2406) inside the ESI dev image
# and export binaries to a host-persistent bin dir.
# Runs as root for apt-get, then chowns results to your host UID:GID.

set -euo pipefail

ENGINE="${OPENFOAM_ENGINE:-docker}"
IMAGE="${OPENFOAM_IMAGE:-docker.io/opencfd/openfoam-dev:2406}"  # full ref incl. :tag
HOST_UID="$(id -u)"
HOST_GID="$(id -g)"

ACTION="clone"
if [[ "${1:-}" == "--update" ]]; then
  ACTION="update"
fi

# Host-persistent dirs + APT caches (faster re-installs)
HOST_PERSIST="${HOME}/.local/share/openfoam"
APT_ARCHIVES="${HOME}/.cache/apt-archives"
APT_LISTS="${HOME}/.cache/apt-lists"
mkdir -p "${HOST_PERSIST}" "${APT_ARCHIVES}" "${APT_LISTS}"

# Container mountpoints (same host dir mounted at both)
PERSIST_USER="/home/openfoam/.local/share/openfoam"
PERSIST_ROOT="/root/.local/share/openfoam"

# --- Inner script (no `-u`!) -------------------------------------------------
INNER_SCRIPT="$(cat <<'EOS'
set -e -o pipefail  # IMPORTANT: no `-u` here, OpenFOAM bashrc may reference unset vars

# Source OpenFOAM env if not already present (portable across images)
if [[ -z "${WM_PROJECT_DIR:-}" ]]; then
  for f in \
    /usr/lib/openfoam/openfoam*/etc/bashrc \
    /opt/OpenFOAM/OpenFOAM-*/etc/bashrc \
    /opt/openfoam*/etc/bashrc \
    /usr/lib/openfoam/openfoam*/etc/openfoam \
    /opt/OpenFOAM/OpenFOAM-*/etc/openfoam \
    /opt/openfoam*/etc/openfoam
  do
    if [[ -r "$f" ]]; then . "$f"; break; fi
  done
fi

# Use the root-mounted persist path (mirrors the host dir)
PERSIST="/root/.local/share/openfoam"
SRC_DIR="${PERSIST}/src/integration-cfmesh"
BIN_DIR="${PERSIST}/cfmesh/bin"
mkdir -p "${PERSIST}/src" "${BIN_DIR}"

# Ensure git is present (dev image often has it; otherwise install quickly)
if ! command -v git >/dev/null 2>&1; then
  apt-get update
  DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends git ca-certificates
fi

# Clone or update
if [[ "${ACTION:-clone}" == "clone" ]]; then
  if [[ ! -d "${SRC_DIR}/.git" ]]; then
    echo "[cfMesh] Cloning integration-cfmesh (branch v2406)…"
    git clone --branch v2406 https://develop.openfoam.com/Community/integration-cfmesh.git "${SRC_DIR}"
  else
    echo "[cfMesh] Repo already exists. Use --update to pull latest."
  fi
else
  if [[ -d "${SRC_DIR}/.git" ]]; then
    echo "[cfMesh] Updating integration-cfmesh…"
    git -C "${SRC_DIR}" pull --ff-only
  else
    echo "[cfMesh] No repo present; cloning fresh."
    git clone --branch v2406 https://develop.openfoam.com/Community/integration-cfmesh.git "${SRC_DIR}"
  fi
fi

# Build
echo "[cfMesh] Building…"
cd "${SRC_DIR}"
./Allwmake -j

# Export selected tools to BIN_DIR (extend if needed)
echo "[cfMesh] Exporting binaries…"
TOOLS=( cartesianMesh surfaceFeatureEdges surfaceGenerateBoundingBox )
for t in "${TOOLS[@]}"; do
  if command -v "${t}" >/dev/null 2>&1; then
    cp -vf "$(command -v "${t}")" "${BIN_DIR}/"
    continue
  fi
  FOUND="$(find . -type f -name "${t}" -perm -111 | head -n 1 || true)"
  if [[ -n "${FOUND}" ]]; then
    cp -vf "${FOUND}" "${BIN_DIR}/"
  else
    echo "[cfMesh] Warning: could not locate ${t} after build."
  fi
done

# Fix ownership for the host user
chown -R "${HOST_UID:?}":"${HOST_GID:?}" "${PERSIST}"

echo "[cfMesh] Done. Binaries in ${BIN_DIR} (mirrored on host)."
EOS
)"

# Pipe the inner script via STDIN (avoids quoting pitfalls)
printf '%s' "${INNER_SCRIPT}" | "${ENGINE}" run --rm -i \
  -v "$PWD:/work" -w /work \
  -v "${HOST_PERSIST}:${PERSIST_USER}" \
  -v "${HOST_PERSIST}:${PERSIST_ROOT}" \
  -v "${APT_ARCHIVES}:/var/cache/apt/archives" \
  -v "${APT_LISTS}:/var/lib/apt/lists" \
  --entrypoint /bin/bash \
  -e HOST_UID="${HOST_UID}" -e HOST_GID="${HOST_GID}" -e ACTION="${ACTION}" \
  "${IMAGE}" -s

echo "[of-build-cfmesh] Completed."